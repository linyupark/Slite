// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports) {
    var $, Base, exeOnce, imgResize, loopData, scrollTop, textareaLimit;
    $ = require('jq');
    /*
        基础类
    */

    Base = (function() {

      function Base() {}

      Base.prototype._global = {};

      Base.prototype._settings = function(defaults, options) {
        if ((defaults != null) && (options != null)) {
          this._global.settings = $.extend(defaults, options);
        }
        return this._global.settings;
      };

      Base.prototype._log = function(msg) {
        var _ref;
        if (((_ref = this._global.settings) != null ? _ref.debug : void 0) === true) {
          return console.log(msg);
        }
      };

      Base.prototype._createEleById = function(id, tag, attrs) {
        var el;
        if (attrs == null) {
          attrs = {};
        }
        el = $("#" + id);
        if (el.length === 0) {
          el = $("<" + tag + " id='" + id + "' />");
          el.attr(attrs);
        }
        return el;
      };

      Base.prototype._int = function(mixed) {
        return parseInt(mixed, 10);
      };

      return Base;

    })();
    /*
        简单弹窗
    */

    exports.Pop = (function(_super) {
      var $pop, $wrap, settings;

      __extends(Pop, _super);

      settings = {
        id: 'simplepop',
        wrapcolor: '#666',
        styles: {
          position: 'absolute',
          zIndex: 8080,
          width: '300px',
          height: '180px',
          display: 'hidden'
        },
        keep: 0
      };

      $pop = null;

      $wrap = null;

      function Pop(options) {
        settings = this._settings(settings, options);
        $pop = this._createEleById(settings.id, 'div').css(settings.styles).css({
          left: this.getWidth() / 2 - (this._int(settings.styles.width)) / 2,
          top: this.getHeight() / 2 - (this._int(settings.styles.height)) / 2
        });
        $wrap = this._createEleById("" + settings.id + "_wrap", 'div').css({
          position: 'absolute',
          display: 'none',
          zIndex: settings.styles.zIndex - 1,
          background: settings.wrapcolor,
          opacity: 0.8,
          height: "" + (this.getHeight()) + "px",
          width: "" + (this.getWidth()) + "px"
        }).on('click', this.close);
        $('body').append($pop);
        $('body').append($wrap);
      }

      Pop.prototype.getWidth = function() {
        return this._int($(window).width());
      };

      Pop.prototype.getHeight = function() {
        return this._int($(window).height());
      };

      Pop.prototype.getPop = function() {
        return $pop;
      };

      Pop.prototype.getWrap = function() {
        return $wrap;
      };

      Pop.prototype.setBtns = function(btns, events) {
        var btn, i, name, _i, _len, _results;
        if (btns == null) {
          btns = ['确定', '取消'];
        }
        if (events == null) {
          events = [null, null];
        }
        _results = [];
        for (i = _i = 0, _len = btns.length; _i < _len; i = ++_i) {
          name = btns[i];
          try {
            btn = $("<button class='btn_" + i + "'>" + name + "</button>").on('click', events[i]);
            _results.push($pop.append(btn));
          } catch (e) {
            _results.push(this._log(e.message));
          }
        }
        return _results;
      };

      Pop.prototype.open = function(msg) {
        $pop.append("<p>" + msg + "</p>");
        $wrap.fadeIn();
        return $pop.fadeIn();
      };

      Pop.prototype.close = function(time) {
        if (time == null) {
          time = settings.keep;
        }
        return setTimeout(function() {
          $pop.fadeOut();
          return $wrap.remove();
        }, time);
      };

      return Pop;

    })(Base);
    /*
        图片自动缩放
    */

    imgResize = function($container, options) {
      var log, resize, settings;
      settings = {
        width: 600,
        resizeTo: 550,
        inAjax: false,
        debug: false,
        touch: function() {
          return $(this).width('auto');
        }
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if ((typeof console !== "undefined" && console !== null) && settings.debug === true) {
          return console.log(msg);
        }
      };
      resize = function() {
        return $container.find('img').each(function() {
          if (+$(this).width() > settings.width) {
            $(this).width(settings.resizeTo);
            return $(this).bind('click', settings.touch);
          }
        });
      };
      $(window).load(function() {
        return resize();
      });
      return $('img', 'body').load(function() {
        if (settings.inAjax === true) {
          return resize();
        }
      });
    };
    /*
        滚动到顶部
        http://jsfiddle.net/linyupark/VA5ww/
    */

    scrollTop = function(options) {
      var log, settings;
      settings = {
        $btn: $('#scrollTop'),
        span: 0,
        target: 0,
        smooth: 0,
        styles: {
          position: 'fixed',
          cursor: 'pointer',
          right: 100,
          bottom: 100,
          display: 'none'
        },
        finish: function() {
          return log('滚动完毕!');
        },
        debug: false
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if ((typeof console !== "undefined" && console !== null) && settings.debug === true) {
          return console.log(msg);
        }
      };
      if ($.type(exeOnce) !== 'function') {
        log('请引入 exeOnce 函数！');
        return false;
      }
      if (settings.$btn.length === 0) {
        settings.$btn = $('<div id="scrollTop" />').css(settings.styles);
        $('body').append(settings.$btn);
      }
      settings.$btn.bind('click', function() {
        var style;
        if (settings.smooth === 0) {
          window.scrollTo(0, settings.target);
          return settings.finish();
        } else {
          style = {
            scrollTop: settings.target
          };
          return $('html, body').stop().animate(style, +settings.smooth, exeOnce(settings.finish));
        }
      });
      return $(window).bind('scroll', function() {
        var span;
        span = $(this).scrollTop();
        if (span > settings.span) {
          return settings.$btn.fadeIn();
        } else {
          return settings.$btn.fadeOut();
        }
      });
    };
    /*
        让某函数只执行一次
    */

    exeOnce = function(fn) {
      return function() {
        try {
          return fn.apply(this, arguments);
        } catch (e) {

        } finally {
          fn = null;
        }
      };
    };
    /*
        循环读取某内容显示
        <div id="msg"></div>​
    */

    loopData = function($display, options) {
      var fetch, log, settings, timeoutLoop;
      if (options == null) {
        options = {};
      }
      settings = {
        format: 'json',
        method: 'get',
        jsonKey: 'resp',
        time: 1000,
        url: '/echo/json/',
        debug: false,
        debugData: {
          html: 'test data',
          json: '{"resp":"test data"}',
          delay: 2
        }
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if ((typeof console !== "undefined" && console !== null) && settings.debug === true) {
          return console.log(msg);
        }
      };
      if ($display.length === 0) {
        log('$display 未指定正确');
      }
      fetch = function() {
        var params;
        params = {
          url: settings.url,
          type: settings.method,
          dataType: settings.format,
          data: settings.debugData,
          success: function(data) {
            log(data);
            if (settings.format === 'html') {
              return $display.html(data);
            } else {
              return $display.html(data[settings.jsonKey]);
            }
          }
        };
        return $.ajax(params);
      };
      timeoutLoop = function() {
        fetch();
        if (settings.debug === false) {
          return setTimeout(function() {
            return timeoutLoop();
          }, settings.time);
        }
      };
      return timeoutLoop();
    };
    /*
        输入框文字限制
        <form>
        <textarea id="text_input"></textarea>
        <div id="limit"></div>
        <input type="submit" value="提交" />
        </form>​
    */

    textareaLimit = function($textarea, options) {
      var check, getTips, log, settings;
      if (options == null) {
        options = {};
      }
      settings = {
        $tips: $('#limit'),
        $btn: $(':submit'),
        tag: 'span',
        color: 'red',
        limit: 140,
        debug: false
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if ((typeof console !== "undefined" && console !== null) && settings.debug === true) {
          return console.log(msg);
        }
      };
      if ($textarea.length === 0) {
        log('$textarea 未指定正确');
      }
      if (settings.$tips.length === 0) {
        log('$tips 未指定正确');
      }
      if (settings.$btn.length === 0) {
        log('$btn 未指定正确');
      }
      getTips = function(n) {
        if (n < 0) {
          settings.$btn.attr('disabled', 'disabled');
          settings.$btn.css('opacity', 0.6);
          return "已经超过 <" + settings.tag + " style='color:" + settings.color + "'>" + (-n) + "</" + settings.tag + "> 字";
        } else {
          settings.$btn.removeAttr('disabled');
          settings.$btn.css('opacity', 1);
          return "还可以输入 <" + settings.tag + ">" + n + "</" + settings.tag + "> 字";
        }
      };
      check = function() {
        var cur_txt_len, n;
        cur_txt_len = $textarea.val().length;
        n = settings.limit - cur_txt_len;
        return settings.$tips.html(getTips(n));
      };
      check();
      return $textarea.bind('keyup', function() {
        return check();
      });
    };
  });

}).call(this);
